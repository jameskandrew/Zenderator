#!/usr/bin/env php
<?php

if(file_exists(__DIR__ . "/../vendor/autoload.php")){
    $rootOfApp = __DIR__ . "/../";
} else {
    $rootOfApp = __DIR__ . "/../../../../";
}


#require_once($rootOfApp . "/bootstrap.php");
ini_set("memory_limit", "256M");

$params = [
    "root"      => $rootOfApp,
    "output"    => APP_ROOT . "/vendor/segura/lib" . strtolower(APP_NAME) . "/",
    "name"      => null,
    "uri"       => null,
    "namespace" => "Gone",
];

$usingEquals = false;
foreach ($argv as $arg){
    $parts = explode("=",$arg);
    if(count($parts) > 1) {
        $usingEquals = true;
        $param = strtolower(ltrim(array_shift($parts), "-"));
        $arg = implode("=", $parts);
        $params[$param] = $arg;
    }
}

if(!$usingEquals) {
    $params = [
        "output"    => isset($argv[1]) ? $argv[1] : APP_ROOT . "/vendor/segura/lib" . strtolower(APP_NAME) . "/",
        "name"      => isset($argv[2]) ? $argv[2] : null,
        "uri"       => isset($argv[3]) ? $argv[3] : null,
        "namespace" => isset($argv[4]) ? $argv[4] : "Gone",
    ];
}

define("APP_NAMESPACE", $params["namespace"]);

if(defined("APP_CORE_NAME")) {
    $scope = APP_CORE_NAME;
}else{
    require_once("{$params["root"]}/vendor/autoload.php");
    define("APP_ROOT", $params["root"]);
    $scope = Gone\AppCore\App::class;

    define("APP_NAME", $params["name"]);
    define("APP_CORE_NAME", $params["namespace"] ."\\" . $params["name"]);
}

try {
    $databaseConfigs = $scope::Container()->get(\Gone\AppCore\DbConfig::class);
}catch(\Gone\AppCore\Exceptions\DbConfigException $dbConfigException){
    $databaseConfigs = null;
}

$zenderator = new \Zenderator\Zenderator(
    $params["root"],
    $databaseConfigs
);

$zenderator
    ->runSdkifier($params["output"], $params["uri"])
    ->runSwaggerifier($params["output"] . "/swagger",$params["uri"])
;
