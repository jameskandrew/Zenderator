    /**
{% if route.callbackProperties %}
{% for callbackProperty in route.callbackProperties %}
     * @param ${{ callbackProperty.name }}
{% endfor %}
{% endif %}
     * @return array
     * @throws Exceptions\SDKException
     **/
    public function {{ route.function }}(
{% if route.callbackProperties %}
{% for callbackProperty in route.callbackProperties %}
        ${{ callbackProperty.name }}{% if not callbackProperty.isMandatory %} = "{{ callbackProperty.default }}"{% endif %}{% if not loop.last %},{% endif %}
{% endfor %}

{% endif %}
    )
    {
        $endpoint = "{{ route.pattern }}";
{% if route.callbackProperties %}
        $propertyArray = [
{% for callbackProperty in route.callbackProperties %}
            '{{ callbackProperty.name }}' => ${{ callbackProperty.name }},
{% endfor %}
        ];

        $endpoint = $this->replaceUrlElements(
            $endpoint,
            $propertyArray
        );
{% endif %}

        $method = "{{ route.method }}";

        try {
            $response = $this->request(
                $method,
                $endpoint,
                [
                    'headers' => [
                        'Accept' => 'application/json',
{% if route.callbackProperties %}
{% for callbackProp in route.callbackProperties %}
{% if callbackProp.in == "header" %}
                        '{{ callbackProp.name }}' => ${{ callbackProp.name }},
{% endif %}
{% endfor %}
{% endif %}
                    ],
{% if route.callbackProperties and route.method != "GET" %}
                    'body' => json_encode($propertyArray),
{% endif %}
                ]
            );
            $body = $response->getBody()->getContents();
            $json = json_decode($body, true);
            if($json === null){
                throw new Exceptions\SDKException("Response from API ({$endpoint}) was not expected JSON: " . var_export($body, true));
            }
{% if route.singular %}
{% if route.hydratable %}
            return $this->sdkClient->{{ route.singular }}->hydrate($json['{{ route.singular }}']);
{% else %}
            return $json['{{ route.singular }}'];
{% endif %}
{% else %}
            return $json;
{% endif %}
        } catch (GuzzleException\ClientException $clientException) {
            $body = $clientException->getResponse()->getBody()->getContents();
            if (json_decode($body) === null) {
                throw Exceptions\SDKException::Factory("Response from API was not expected JSON")
                    ->setMethod($method)
                    ->setGuzzleConfig($this->sdkClient->getGuzzle()->getConfig())
                    ->setEndpoint($endpoint)
{% if route.callbackProperties %}
                    ->setRequest($propertyArray)
{% endif %}
                    ->setResponse($body);
            }
            $body = json_decode($body, true);
            return $body;
        }
    }
