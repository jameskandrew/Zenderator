    /**
{% if route.callbackProperties %}
{% for callbackProperty in route.callbackProperties %}
     * @param ${{ callbackProperty.name }}
{% endfor %}
{% endif %}
     * @param $_headers
     * @return array
     * @throws Exceptions\SDKException
     * callback
     **/
    public function {{ route.function }}(
{% if route.callbackProperties %}
{% for callbackProperty in route.callbackProperties %}
        ${{ callbackProperty.name }}{% if callbackProperty.default %} = "{{ callbackProperty.default }}"{% endif %},

{% endfor %}
{% endif %}
        $_headers = []
    )
    {
{% if route.callbackProperties %}
        $propertyArray = [
{% for callbackProperty in route.callbackProperties %}
            '{{ callbackProperty.name }}' => ${{ callbackProperty.name }},
{% endfor %}
        ];
{% endif %}
        /** @var $response \GuzzleHttp\Psr7\Response */

{% if route.callbackProperties %}
        $endpoint = $this->replaceUrlElements(
            "{{ route.pattern }}",
            [
{% for callbackProperty in route.callbackProperties %}
                '{{ callbackProperty.name }}' => ${{ callbackProperty.name }},
{% endfor %}
            ]
        );
{% else %}
        $endpoint = "{{ route.pattern }}";
{% endif %}
        $method = "{{ route.method }}";

        try {
            $response = $this->request(
                $method,
                $endpoint,
                [
                    'headers' => array_merge([
                        'Accept' => 'application/json',
                    ],$_headers),
{% if route.callbackProperties %}
                    'body' => json_encode($propertyArray),
{% endif %}
                ]
            );
            $body = $response->getBody()->getContents();
            if(json_decode($body) === null){
                throw new Exceptions\SDKException("Response from API ({$endpoint}) was not expected JSON: " . var_export($body, true));
            }
            $body = json_decode($body, true);
            return $body;
        } catch (GuzzleException\ClientException $clientException) {
            $body = $clientException->getResponse()->getBody()->getContents();
            if (json_decode($body) === null) {
                throw new Exceptions\SDKException(
                    "Response from API ({$endpoint}) was not expected JSON:\n" .
                    "Method: {$method}\n" .
                    "GuzzleConfig: " . var_export($this->sdkClient->getGuzzle()->getConfig(), true) . "\n".
                    "URL: {$endpoint}\n" .
{% if route.callbackProperties %}
                    "Request: " .  json_encode($propertyArray, JSON_PRETTY_PRINT) . "\n\n" .
{% endif %}
                    var_export($body, true)
                );
            }
            $body = json_decode($body, true);
            return $body;
        }
    }
