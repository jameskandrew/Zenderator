    /**
     * Return a single Models\{{ routes['create'].singular }}Model by ID
     *
     * @return Models\{{ routes['create'].singular }}Model|array
     *
     * @throws Exceptions\ObjectNotFoundException
     * @throws Exceptions\SDKException
     **/
    public function {{ route.function }}($id, $hydrate=true)
    {
        /** @var $response \GuzzleHttp\Psr7\Response */
        $endpoint = $this->replaceUrlElements(
            "{{ route.pattern }}",
            [
                'id' => $id
            ]
        );
        try{
            $response = $this->request(
                "{{ route.method }}",
                $endpoint,
                [
                    'headers' => [
                        'Accept' => 'application/json',
                    ],
                ]
            );
            $body = $response->getBody()->getContents();
            if(json_decode($body) === null){
                throw new Exceptions\SDKException("Response from API ({$endpoint}) was not expected JSON: " . var_export($body, true));
            }
            $body = json_decode($body, true);
            if($hydrate){
                return $this->hydrate($body['{{ route.singular }}']);
            } else {
                return $body['{{ route.singular }}'];
            }
        }catch(\GuzzleHttp\Exception\ClientException $clientException){
            $body = $clientException->getResponse()->getBody()->getContents();
            if(json_decode($body) === null){
                throw new Exceptions\SDKException("Response from API ({$endpoint}) was not expected JSON and it was a " . $clientException->getResponse()->getStatusCode());
            }
            $json = json_decode($body, true);
            if($json['Status'] == 'Fail'){
                throw new Exceptions\ObjectNotFoundException($json['Reason']);
            }else{
                throw new Exceptions\ObjectNotFoundException("A bad thing happened: " . $body);
            }
        }
    }

