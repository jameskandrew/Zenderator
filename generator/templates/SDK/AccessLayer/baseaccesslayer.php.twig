<?php
namespace {{ class.namespace }}\AccessLayer\Base;

use Gone\SDK\Common\Abstracts\AbstractModel;
use Gone\SDK\Common\Abstracts\HttpAccessLayer;
use Gone\SDK\Common\Interfaces\DataAccessLayerInterface;
use Gone\SDK\Common\Exceptions;
use {{ class.namespace }}\Models;
use Gone\SDK\Common\Filters\Filter;
{% set hasUpdate = false %}
{% set hasCreate = false %}
{% for method in class.methods %}
{% if method.function == "update" %}
{% set hasUpdate = true %}
{% elseif method.function == "create" %}
{% set hasCreate = true %}
{% endif %}
{% endfor %}
abstract class Base{{ class.name }}AccessLayer extends HttpAccessLayer {{ hasUpdate or hasCreate ? "implements DataAccessLayerInterface" : "" }}
{
{% for method in class.methods %}
{% if method.function == "update" %}
{% include "SDK/AccessLayer/_function_create_update.php.twig" with {'methodName':'update','class':class,'method':method} %}
{% elseif method.function == "create" %}
{% include "SDK/AccessLayer/_function_create_update.php.twig" with {'methodName':'create','class':class,'method':method} %}
{% else %}
    /**
{% for name, argument in method.arguments %}
     * @param {{ argument.phpType }} ${{ name }}
{% endfor %}
     * @param bool $hydrate
     *
{% if method.responseKey %}
     * @return Models\{{ method.responseClass }}Model{{ method.returnsArray ? '[]' : '' }}|array|null
{% else %}
     * @return array|null
{% endif %}
     * @throws Exceptions\SDKException
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function {{ method.function }}(
{% for name, argument in method.arguments %}
{% if argument.required %}
        {{ argument.phpType }} ${{ name }},
{% else %}
        {{ argument.phpType }} ${{ name }} = {{ argument.default|json_encode()|raw }},
{% endif %}
{% endfor %}
        bool $hydrate = true
    ){
        $endpoint = "{{ method.pattern }}";
        $options = [];

{% if method.groupedArguments.query %}
{% include "SDK/AccessLayer/_method_args.php.twig" with {'name':'queryArgs','args':method.groupedArguments.query} %}
        $endpoint = $this->replaceUrlElements($endpoint,$queryArgs);
{% endif %}
{% if method.groupedArguments.body %}
{% include "SDK/AccessLayer/_method_args.php.twig" with {'name':'bodyArgs','args':method.groupedArguments.body} %}
        $options["body"] = json_encode($bodyArgs);
{% endif %}
{% if method.groupedArguments.header %}
{% include "SDK/AccessLayer/_method_args.php.twig" with {'name':'headerArgs','args':method.groupedArguments.header} %}
        $options["headers"] = $headerArgs;
{% endif %}

        $response = $this->request(
            "{{ method.method }}",
            $endpoint,
            $options
        );
{% if method.responseKey %}
        $data = $response["{{ method.responseKey }}"];
        if($hydrate){
            return $this->hydrate{{ method.returnsArray ? 'Many' : '' }}(Models\{{ method.responseClass }}Model::class,$data);
        } else {
            return $data;
        }
{% else %}
        return $response;
{% endif %}
    }
{% endif %}

{% endfor %}

{% if hasUpdate or hasCreate %}
    public function save(AbstractModel ${{ class.variable }}, bool $hydrate = true)
    {
        $pks = ${{ class.variable }}->getPrimaryKeys();
        $pkCount = count($pks);
        $pks = array_filter($pks);
        {% if hasUpdate %}
        if(count($pks) == $pkCount){
            return $this->update(${{ class.variable }}, $hydrate);
        }
        {% endif %}
        {% if hasCreate %}
        return $this->create(${{ class.variable }}, $hydrate);
        {% endif %}
    }
{% endif %}
}