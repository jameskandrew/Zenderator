
    /**
     * @param AbstractModel ${{ class.variable }}
     * @param bool $hydrate
     *
     * @throws Exceptions\SDKException
     * @throws Exceptions\SDKFailResponse
     * @throws \Exception
     * @throws \GuzzleHttp\Exception\GuzzleException
     *
     * @return \{{ method.responseClass }}|array|null
     */
    public function {{ methodName }}(AbstractModel ${{ class.variable }}, bool $hydrate = true){

        if(!(${{ class.variable }} instanceof \{{ method.responseClass }})){
            $class = get_class(${{ class.variable }});
            throw new \Exception("Trying to save $class though {{ class.name }}AccessLayer");
        }
        $data = ${{ class.variable }}->__toDirtyArray();
{% if methodName == "update" %}
        if(!empty($data)){
{% endif %}
            $endpoint = "{{ method.pattern }}";
            $options = [];
            $pks = ${{ class.variable }}->getOriginalPrimaryKeys();
            $endpoint = $this->replaceUrlElements($endpoint,$pks);
            $options["json"] = $data;

            $response = $this->request(
                "{{ method.method }}",
                $endpoint,
                $options
            );

{% if method.responseKey %}
            $data = $response["{{ method.responseKey }}"];
{% if methodName == "update" %}
        } else {
            $data = ${{ class.variable }}->__toArray();
        }
{% endif %}

        if($hydrate){
            return $this->hydrate{{ method.returnsArray ? 'Many' : '' }}(\{{ method.responseClass }}::class,$data);
        } else {
            return $data;
        }
{% else %}
        return $response;
{% endif %}
    }