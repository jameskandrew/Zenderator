<?php
namespace {{ app_namespace }}\SDK\{{ app_name }}\Models\Base;

use Gone\SDK\Common\Abstracts\AbstractModel;
use Gone\SDK\Common\Traits\PresentableTrait;
use {{ app_namespace }}\SDK\{{ app_name }}\AccessLayer\{{ pack_name }}AccessLayer;
use {{ app_namespace }}\SDK\{{ app_name }}\Models\{{ pack_name }}Model;
{% for propertyName, data in propertyData %}
{% if data.related is not empty %}
{% for related in data.related %}
use {{ app_namespace }}\SDK\{{ app_name }}\Models\{{ related.model }};
{% endfor %}
{% endif %}
{% endfor %}

/**
 * Class Base{{ pack_name }}Model
 * @package {{ app_namespace }}\SDK\{{ app_name }}\Models\Base
 * @property \{{ app_namespace }}\SDK\{{ app_name }}\Client $sdkClient
 */
abstract class Base{{ pack_name }}Model extends AbstractModel
{
    use PresentableTrait;

{% if singular is not empty %}
    const NAME_SINGULAR = "{{ singular }}";
{% endif %}
{% if plural is not empty %}
    const NAME_PLURAL = "{{ plural }}";
{% endif %}
    const TABLE_NAME = "{{ tableName }}";

{% for propertyName, data in propertyData %}
    const FIELD_{{ propertyName|upper }} = '{{ propertyName|transform_studly_to_camel }}';
{% endfor %}

    //Property DB Types
{% for propertyName, data in propertyData %}
    const DBTYPE_{{ propertyName|upper }} = '{{ data.type }}';
{% endfor %}

    // Constant arrays defined by ENUMs
{% for propertyName, data in propertyData %}
{% if data.options is not empty %}
    const OPTIONS_{{ propertyName|upper }} = ["{{ data.options | join('", "') | raw }}"];
{% endif %}
{% endfor %}

{% for propertyName, data in propertyData %}
{% if data.options is not empty %}
{% for permittedValue in data.options %}
    const {{ propertyName|upper }}_{{ permittedValue|upper|replace({'-':'_'}) }} = '{{ permittedValue }}';
{% endfor %}
{% endif %}
{% endfor %}

    // Properties
{% for propertyName, data in propertyData %}
    /** @var {{ data.phpType }} ${{ propertyName }} */
    protected ${{ propertyName }};
{% endfor %}

    public function __toArray() : array
    {
        return [
{% for property in properties %}
            "{{ property }}" => $this->get{{ property }}(),
{% endfor %}
        ];
    }

    protected function getAccessLayer() : {{ pack_name }}AccessLayer
    {
        return new {{ pack_name }}AccessLayer($this->sdkClient);
    }

    /**
     * Convenience function to create/update the current model.
     */
    public function save() : {{ pack_name }}Model
    {
        return $this->getAccessLayer()->createFromObject($this);
    }

    // Getters and Setters
{% for propertyName, data in propertyData %}
    public function get{{ propertyName }}() : {% if data.nullable %}?{% endif %}{{ data.phpType }}
    {
        return $this->{{ propertyName }};
    }

    public function set{{ propertyName }}(${{ propertyName }}) : {{ pack_name }}Model
    {
        if($this->{{ propertyName }} != ${{ propertyName }}){
            $this->addDirtyKey('{{ propertyName }}');
            $this->{{ propertyName }} = ${{ propertyName }};
        }
        return $this;
    }
{% if data.related is not empty %}
{% for related in data.related %}
    public function get{{ data.cleanName }}Model() : {{ related.model }}
    {
        $this->sdkClient->{{ data.cleanName[:1]|lower ~ data.cleanName[1:] }}
            ->get($this->get{{ propertyName }}());
    }
{% endfor %}
{% endif %}

{% endfor %}

{% for route in routes %}
{% if route.modelSafeMethod %}
    public function {{ route.function }}(){% if route.hydratable %} : {{ pack_name }}Model{%  endif %}
    {
        return $this->getAccessLayer()->{{ route.function }}(
{% if route.callbackProperties %}
{% for callbackProperty in route.callbackProperties %}
            $this->get{{ callbackProperty.name }}(){% if not loop.last %},{% endif %}
{% endfor %}
{% endif %}
        );
    }
{% endif %}
{% endfor %}

    public static function getPropertyMeta(){
        return [
{% for propertyName, data in propertyData %}
            '{{ propertyName }}' => [
                'type' => '{{ data.type }}',
                'nullable' => {{ data.nullable|json_encode|raw }},
                'length' => {{ data.length }},
                'unique' => {{ data.unique|json_encode()|raw }},
{% if data.options is not empty %}
                'options' => ["{{ data.options | join('", "') | raw }}"],
{% endif %}
{% if data.related is not empty %}
                'related' => [
{% for related in data.related %}
                    [
                        'model' => '{{ related.model }}',
                        'column' => '{{ related.column }}',
                    ],
{% endfor %}
                ],
{% endif %}
{% if data.remote is not empty %}
                'remote' => [
{% for remote in data.remote %}
                    [
                        'model' => '{{ remote.model }}',
                        'column' => '{{ remote.column }}',
                    ],
{% endfor %}
                ],
{% endif %}
            ],
{% endfor %}
        ];
    }

}
