<?php

namespace {{ class.namespace }}\Services\Base;

use Gone\AppCore\Abstracts\Service as AbstractService;
use Gone\AppCore\Interfaces\ServiceInterface as ServiceInterface;
use Gone\SDK\Common\Filters\Filter;
use Gone\SDK\Common\Filters\FilterCondition;
use \{{ class.namespace }}\AccessLayers;
use \{{ class.namespace }}\Models;
use Zend\Db\ResultSet\ResultSet;
use Zend\Db\Sql\Select;

{% include '_overwrite_warning.twig' %}

// @todo: Make all Services implement a ServicesInterface
abstract class Base{{ class.name }}Service
    extends AbstractService
//    implements ServiceInterface
{
{% if class.relatedData %}
    // Related Objects Table Access Layers
{% for related in class.relatedData %}
{% if related.class.name != class.name %}
    /** @var AccessLayers\{{ related.class.name }}AccessLayer */
    protected ${{ related.class.variable }}AccessLayer;
{% endif %}
{% endfor %}

{% endif %}
{% if class.remoteData %}
    // Remote Constraints Table Access Layers
{% for remote in class.remoteData %}
{% if remote.class.name != class.name %}
    /** @var AccessLayers\{{ remote.class.name }}AccessLayer */
    protected ${{ remote.class.variable }}AccessLayer;
{% endif %}
{% endfor %}

    protected $modelClass = Models\{{ class.name }}Model::class;

{% endif %}
    public function __construct(
{% for related in class.relatedData %}
{% if related.class.name != class.name %}
        AccessLayers\{{ related.class.name }}AccessLayer ${{ related.class.variable }}AccessLayer,
{% endif %}
{% endfor %}
{% for remote in class.remoteData %}
{% if remote.class.name != class.name %}
        AccessLayers\{{ remote.class.name }}AccessLayer ${{ remote.class.variable }}AccessLayer,
{% endif %}
{% endfor %}
        AccessLayers\{{ class.name }}AccessLayer ${{ class.variable }}AccessLayer
    )
    {
{% for related in class.relatedData %}
{% if related.class.name != class.name %}
        $this->{{ related.class.variable }}AccessLayer = ${{ related.class.variable }}AccessLayer;
{% endif %}
{% endfor %}
{% for remote in class.remoteData %}
{% if remote.class.name != class.name %}
        $this->{{ remote.class.variable }}AccessLayer = ${{ remote.class.variable }}AccessLayer;
{% endif %}
{% endfor %}
        parent::__construct(${{ class.variable }}AccessLayer);
    }

    public function getByPK($pk){
        $_pk = [];
        foreach($pk as $property => $value){
            if(in_array($property,Models\{{ class.name }}Model::PRIMARY_KEYS)){
                $_pk[$property] = $value;
            }
        }
        return parent::getByPK($_pk);
    }

{% for related in class.relatedData %}
{% if loop.first %}
    //Related Data
{% endif %}
{% for field in related.fields %}
    public function get{{ field.related.variableUC }}($pks)
    {
        return $this->{{ related.class.variable }}AccessLayer->get(
            Filter::Factory(Models\{{ related.class.name }}Model::TABLE_NAME)
                ->addJoin(
                    Models\{{ class.name }}Model::FIELD_{{ field.local.name|upper }},
                    Models\{{ class.name }}Model::TABLE_NAME,
                    Models\{{ related.class.name }}Model::FIELD_{{ field.related.name|upper }},
                    Models\{{ related.class.name }}Model::TABLE_NAME
                )
{% for key in class.primaryKeys %}
                ->addWhere(
                    Models\{{ class.name }}Model::FIELD_{{ key|upper }},
                    $pks[Models\{{ class.name }}Model::FIELD_{{ key|upper }}],
                    FilterCondition::CONDITION_EQUAL,
                    Models\{{ class.name }}Model::TABLE_NAME
                )
{% endfor %}
        );
    }

{% endfor %}
{% endfor %}


{% for remote in class.remoteData %}
{% if loop.first %}
    //Remote Data
{% endif %}
{% for field in remote.fields %}
    public function get{{ field.remote.variablePluralUC }}($pks, Filter $filter)
    {
        $filter
            ->addJoin(
                Models\{{ class.name }}Model::FIELD_{{ field.local.name|upper }},
                Models\{{ class.name }}Model::TABLE_NAME,
                Models\{{ remote.class.name }}Model::FIELD_{{ field.remote.name|upper }},
                Models\{{ remote.class.name }}Model::TABLE_NAME
            )
{% for key in class.primaryKeys %}
            ->addWhere(
                Models\{{ class.name }}Model::FIELD_{{ key|upper }},
                $pks[Models\{{ class.name }}Model::FIELD_{{ key|upper }}],
                FilterCondition::CONDITION_EQUAL,
                Models\{{ class.name }}Model::TABLE_NAME
            ){{ loop.last ? ';' : '' }}
{% endfor %}
        return $this->{{ remote.class.variable }}AccessLayer->getAll($filter);
    }

{% endfor %}
{% endfor %}
}