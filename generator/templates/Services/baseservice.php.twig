<?php
namespace {{ namespace }}\Services\Base;

use Gone\AppCore\Abstracts\Service as AbstractService;
use Gone\AppCore\Interfaces\ServiceInterface as ServiceInterface;
use Gone\SDK\Common\Filters\Filter;
use \{{ namespace }}\TableAccessLayers;
use \{{ namespace }}\Models;
use Zend\Db\ResultSet\ResultSet;
use Zend\Db\Sql\Select;

{% include '_overwrite_warning.twig' %}

// @todo: Make all Services implement a ServicesInterface. - MB
abstract class Base{{ class_name }}Service
    extends AbstractService
    implements ServiceInterface
{

    // Related Objects Table Access Layers
{% for related_object in related_objects_shared|sort|unique %}
{% if related_object.getRemoteClass != class_name %}
    /** @var TableAccessLayers\{{ related_object.getRemoteClass }}TableAccessLayer */
    protected ${{ related_object.getRemoteVariable }}TableAccessLayer;
{% endif %}
{% endfor %}

    // Remote Constraints Table Access Layers
{% for remote_constraint in remote_constraints %}
{% if remote_contraint.getRemoteClass != class_name %}
    /** @var TableAccessLayers\{{ remote_constraint.getLocalClass }}TableAccessLayer */
    protected ${{ remote_constraint.getLocalVariable }}TableAccessLayer;
{% endif %}
{% endfor %}

    /**
     * Constructor.
     *
{% for related_object in related_objects_shared|sort|unique %}
{% if related_object.getRemoteClass != class_name %}
     * @param TableAccessLayers\{{ related_object.getRemoteClass }}TableAccessLayer ${{ related_object.getRemoteVariable }}TableAccessLayer
{% endif %}
{% endfor %}
{% for remote_constraint in remote_constraints %}
{% if remote_contraint.getRemoteClass != class_name %}
     * @param TableAccessLayers\{{ remote_constraint.getLocalClass }}TableAccessLayer ${{ remote_constraint.getLocalVariable }}TableAccessLayer
{% endif %}
{% endfor %}
     * @param TableAccessLayers\{{ class_name }}TableAccessLayer ${{ variable_name }}TableAccessLayer
     */
    public function __construct(
{% for related_object in related_objects_shared|sort|unique %}
{% if related_object.getRemoteClass != class_name %}
        TableAccessLayers\{{ related_object.getRemoteClass }}TableAccessLayer ${{ related_object.getRemoteVariable }}TableAccessLayer,
{% endif %}
{% endfor %}
{% for remote_constraint in remote_constraints %}
{% if remote_contraint.getRemoteClass != class_name %}
        TableAccessLayers\{{ remote_constraint.getLocalClass }}TableAccessLayer ${{ remote_constraint.getLocalVariable }}TableAccessLayer,
{% endif %}
{% endfor %}
        TableAccessLayers\{{ class_name }}TableAccessLayer ${{ variable_name }}TableAccessLayer
    )
    {
{% for related_object in related_objects_shared|sort|unique %}
{% if related_object.getRemoteClass != class_name %}
        $this->{{ related_object.getRemoteVariable }}TableAccessLayer = ${{ related_object.getRemoteVariable }}TableAccessLayer;
{% endif %}
{% endfor %}
{% for remote_constraint in remote_constraints %}
{% if remote_contraint.getRemoteClass != class_name %}
    $this->{{ remote_constraint.getLocalVariable }}TableAccessLayer = ${{ remote_constraint.getLocalVariable }}TableAccessLayer;
{% endif %}
{% endfor %}
        parent::__co$this->{{ variable_name }}TableAccessLayer = ${{ variable_name }}TableAccessLayer;
    }

    /**
     * @param int $id
     * @return Models\{{ class_name }}Model|null
     */
    public function getById(int $id) : ?Models\{{ class_name }}Model
    {
        /** @var TableGateways\{{ class_name }}TableGateway ${{ variable_name }}Table */
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();
        return ${{ variable_name }}Table->getById($id);
    }

    /**
     * @param $dataExchange
     * @return Models\{{ class_name }}Model|null|null
     */
    public function create($dataExchange)
    {
        /** @var TableGateways\{{ class_name }}TableGateway ${{ variable_name }}Table */
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();
        ${{ variable_name }} = $this->getNewModelInstance($dataExchange);
        return ${{ variable_name }}Table->save(${{ variable_name }});
    }

    public function updatePK($oldPK, $newPK){
        ${{ variable_name }} = $this->getById($oldPK);
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();
        return ${{ variable_name }}Table->updatePK(${{ variable_name }},$newPK);
    }
}