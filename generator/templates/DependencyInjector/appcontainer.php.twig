<?php
{% if 'Services' in config.templates %}
{% for model in models %}
$this->container[\{{ model.namespace }}\Services\{{ model.getClassName }}Service::class] = function (Slim\Container $c) {
return new \{{ model.namespace }}\Services\{{ model.getClassName }}Service(
{% if model.getRelatedObjects is not null %}
    // Related Objects.
    {% for object in model.getRelatedObjects|sort|unique %}
        $c->get(\{{ model.namespace }}\TableGateways\{{ object.getRemoteClass }}TableGateway::class),
    {% endfor %}
{% endif %}

{% if model.getRelatedObjects is not null %}
    // Remote Constraints.
    {% for remote_constraint in model.getRemoteObjects %}
        // $c->get(\{{ model.namespace }}\TableGateways\{{ remote_constraint.getLocalClass }}TableGateway::class),
    {% endfor %}
{% endif %}
// Self TableGateway.
$c->get(\{{ model.namespace }}\TableGateways\{{ model.getClassName }}TableGateway::class)
);
};
{% endfor %}
{% endif %}

{% if 'Controllers' in config.templates %}
    {% for model in models %}
        $this->container[\{{ model.namespace }}\Controllers\{{ model.getClassName }}Controller::class] = function (Slim\Container $c) {
        return new \{{ model.namespace }}\Controllers\{{ model.getClassName }}Controller(
        $c->get(\{{ model.namespace }}\Services\{{ model.getClassName }}Service::class)
        );
        };
    {% endfor %}
{% endif %}

{% for model in models %}
    $this->container[\{{ model.namespace }}\TableGateways\{{ model.getClassName }}TableGateway::class] = function (Slim\Container $c) {
    return new \{{ model.namespace }}\TableGateways\{{ model.getClassName }}TableGateway(
    {% for object in model.getRelatedObjects|sort|unique %}
        $c->get(\{{ model.namespace }}\TableGateways\{{ object.getRemoteClass }}TableGateway::class),
    {% endfor %}
    $c->get('Faker'),
    $c->get(\Gone\AppCore\Db::class)
    );
    };
{% endfor %}

{% for model in models %}
    $this->container['{{ model.getClassName }}MockModel'] = function (Slim\Container $c) {
    /** @var {{ model.namespace }}\TableGateways\{{ model.getClassName }}TableGateway ${{ model.getClassName }}TableGateway */
    ${{ model.getClassName }}TableGateway = $c->get(\{{ model.namespace }}\TableGateways\{{ model.getClassName }}TableGateway::class);
    $new{{ model.getClassName }}Object = ${{ model.getClassName }}TableGateway->getNewMockModelInstance();
    return $new{{ model.getClassName }}Object;
    };
{% endfor %}


return $this->container;