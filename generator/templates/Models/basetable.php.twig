<?php

namespace {{ namespace }}\AccessLayers\Base;

use \Gone\AppCore\Abstracts\TableAccessLayer as AbstractAccessLayer;
use \Gone\AppCore\Abstracts\Model;
use \Gone\AppCore\Db;
use \{{ namespace }}\TableAccessLayers;
use \{{ namespace }}\Models;
use \Zend\Db\Adapter\AdapterInterface;
use \Zend\Db\ResultSet\ResultSet;
use \Gone\AppCore\Exceptions;

{% include '_overwrite_warning.twig' %}

abstract class Base{{ class_name }}AccessLayer extends AbstractAccessLayer
{
    protected $table = '{{ table }}';

    protected $database = '{{ database }}';
{% if isView %}

    protected $isView = true;
{% endif %}

    protected $model = Models\{{ class_name }}Model::class;

    /**
     * AbstractTableGateway constructor.
     *
     * @param Db $databaseConnector
     *
     * @throws Exceptions\DbException
     */
    public function __construct(Db $databaseConnector)
    {
        //Setup Database Adapter
        $databaseAdapter = $databaseConnector->getDatabase($this->database);
        return parent::__construct($databaseAdapter, $this->table, null);
    }
{% if isView %}

    public function getViewModelBreakdown(){
        return [
{% for tableName, data in view_model_data %}
            "{{ tableName }}" => [
                "columns" => [
{% for column in data.columns %}
                    "{{ column }}",
{% endfor %}
                ],
                "dependent" => [
{% for dependent, source in data.dependent %}
                    "{{ dependent }}" => "{{ source }}",
{% endfor %}
                ],
                "pk" => "{{ data.pk }}",
            ],
{% endfor %}
        ];
    }
{% endif %}
}