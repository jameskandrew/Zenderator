<?php
namespace {{ class.namespace }}\Test\Models\Generated;

use \{{ class.namespace }}\TableGateways;
use \{{ class.namespace }}\TableGateways\{{ class.name }}TableGateway;
use \{{ class.namespace }}\Models\{{ class.name }}Model;
use \{{ class.namespace }}\Models;
use \Gone\UUID\UUID;

{% set existingMethods = [] %}

class {{ class.name }}Test extends \Gone\AppCore\Test\BaseTestCase
{
    /** @var {{ class.name }}TableGateway */
    protected $testTableGateway;

    /** @var {{ class.name }}Model */
    protected $testInstance;

    /** @var Model[] */
    static private $cleanupList;

    public function setUp()
    {
        parent::setUp();
        $this->testTableGateway = $this->getDIContainer()->get({{ class.name }}TableGateway::class);
        $this->testInstance = $this->testTableGateway->getNewMockModelInstance();
    }

    public static function tearDownAfterClass()
    {
        foreach(self::$cleanupList as $model){
            $model->destroy();
        }
        parent::tearDownAfterClass();
    }

    public function testExchangeArray()
    {
        $data = [];
{% for propertyName, data in class.properties %}
{% if data.phpType == 'int' or column.phpType == 'float' %}
        $data['{{ propertyName }}'] = self::getFaker()->randomDigitNotNull;
{% else %}
        $data['{{ propertyName }}'] = self::getFaker()->word;
{% endif %}
{% endfor %}
        $this->testInstance = new {{ class.name }}Model($data);
{% for propertyName, data in class.properties %}
        $this->assertEquals($data['{{ propertyName }}'], $this->testInstance->get{{ column.getPropertyFunction }}());
{% endfor %}
    }

    public function testGetRandom()
    {
        /** @var {{ class.name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class.name }}TableGateway::class);

        // If there is no data in the table, create some.
        if($table->getCount() == 0){
            $dummyObject = $table->getNewMockModelInstance();
            $table->save($dummyObject);
        }

        ${{ class.variable }} = $table->fetchRandom();
        $this->assertTrue(${{ class.variable }} instanceof {{ class.name }}Model, "Make sure that \"" . get_class(${{ class.name|singularize|transform_studly_to_camel }}) . "\" matches \"{{ class.name }}Model\"") ;

        return ${{ class.variable }};
    }

    public function testNewMockModelInstance()
    {
        /** @var {{ class.name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class.name }}TableGateway::class);
        $new{{ remote_object.getLocalModelName }} = $table->getNewMockModelInstance();

        $this->assertInstanceOf(
            Models\{{ class.name }}Model::class,
            $new{{ remote_object.getLocalModelName }}
        );

        $new{{ remote_object.getLocalModelName }}->save();

        self::$cleanupList[] = $new;

        return $new{{ remote_object.getLocalModelName }};
    }

    public function testNewModelFactory()
    {
        $instance = {{ class.name }}Model::factory();

        $this->assertInstanceOf(
            Models\{{ class.name }}Model::class,
            $instance
        );
    }

    public function testSave()
    {
        /** @var {{ class.name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class.name }}TableGateway::class);
        /** @var Models\{{ class.name }}Model $mockModel */
        /** @var Models\{{ class.name }}Model $savedModel */
        $mockModel = $table->getNewMockModelInstance();
        $savedModel = $mockModel->save();

        $mockModelArray = $mockModel->__toArray();
        $savedModelArray = $savedModel->__toArray();

        // Remove auto increments from test.
        foreach($mockModel->getAutoIncrementKeys() as $autoIncrementKey => $discard){
            foreach($mockModelArray as $key => $value){
                if(strtolower($key) == strtolower($autoIncrementKey)){
                    unset($mockModelArray[$key]);
                    unset($savedModelArray[$key]);
                }
            }
        }

{% for propertyName, data in class.properties %}
{% if data.type == 'json' %}
        // Reserialize JSON fields
        $mockModelArray['{{ column.getPropertyFunction }}']  = json_encode(json_decode($mockModelArray['{{ column.getPropertyFunction }}'],true), JSON_PRETTY_PRINT);
        $savedModelArray['{{ column.getPropertyFunction }}'] = json_encode(json_decode($savedModelArray['{{ column.getPropertyFunction }}'],true), JSON_PRETTY_PRINT);
{% endif %}
{% if data.type == 'float' %}
        // Remove float fields from comparison - they're always going to be slightly different in painful-to-test ways.
        unset($mockModelArray['{{ column.getPropertyFunction }}'], $savedModelArray['{{ column.getPropertyFunction }}']);
{% endif %}
{% endfor %}

        $this->assertEquals($mockModelArray, $savedModelArray);
    }

{% if class.properties.id is defined %}
    /**
     * @depends testGetRandom
     */
    public function testGetById({{ class.name }}Model ${{ class.variable }})
    {
        /** @var {{ class.variable }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class.name }}TableGateway::class);
        $results = $table->select(['id' => ${{ class.variable }}->getId()]);
        ${{ class.variable }}Row = $results->current();
        $this->assertTrue(${{ class.variable }}Row instanceof {{ class.name }}Model);
    }
{% endif %}

    /**
     * @depends testGetRandom
     */
    public function testSettersAndGetters({{ class.name }}Model ${{ class.variable }})
    {
{% for propertyName, data in class.properties %}
        $this->assertTrue(method_exists(${{ class.variable }}, "get{{ data.name }}"));
        $this->assertTrue(method_exists(${{ class.variable }}, "set{{ data.name }}"));
{% endfor %}

        $test{{ class.name }} = new {{ class.name }}Model();
{% for propertyName, data in class.properties %}
{% if data.phpType == 'int' or data.phpType == 'float' %}
        $input = self::getFaker()->randomDigitNotNull;
{% else %}
        $input = self::getFaker()->word;
{% endif %}
        $test{{ class.name }}->set{{ data.name }}($input);
        $this->assertEquals($input, $test{{ class.name }}->get{{ data.name }}());
{% endfor %}
    }

{% for propertyName, data in class.properties %}
{% if 'constraints' in column|keys %}
    /**
    * @depends testGetRandom
    */
    public function testFetch{{ column.field }}Object({{ class.name }}Model ${{ class.name|singularize|transform_studly_to_camel }})
    {
        $this->assertTrue(method_exists(${{ class.name|singularize|transform_studly_to_camel }}, "fetch{{ column.field }}Object"));

        ${{ column.field }}Object = ${{ class.name|singularize|transform_studly_to_camel }}->fetch{{ column.field }}Object();
        $this->assertInstanceOf(
            Models\{{ column.constraints.remote_model_class }}Model::class,
            ${{ column.field }}Object
        );
    }
{% endif %}
{% endfor %}

{% if autoincrement_keys %}
    public function testAutoincrementedIdIsApplied()
    {
        /** @var {{ class.name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class.name }}TableGateway::class);
        $new{{ remote_object.getLocalModelName }} = $table->getNewMockModelInstance();

        // Set primary keys to null.
{% for primary_parameter in autoincrement_keys %}
        $new{{ remote_object.getLocalModelName }}->set{{ primary_parameter }}(null);
{% endfor %}

        // Save the object
        $new{{ remote_object.getLocalModelName }}->save();

        // verify that the AI keys have been set.
{% for primary_parameter in primary_parameters %}
        $this->assertNotNull($new{{ remote_object.getLocalModelName }}->get{{ primary_parameter }}());
{% endfor %}
    }
{% endif %}

    public function testDestroy()
    {
        /** @var {{ class.name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class.name }}TableGateway::class);
        /** @var Models\{{ class.name }}Model $destroyableModel */
        $destroyableModel = $table->getNewMockModelInstance();
        $destroyableModel->save();
        $this->assertTrue(true, $destroyableModel->destroy());
    }

    public function testDestroyThoroughly()
    {
        /** @var {{ class.name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class.name }}TableGateway::class);
        /** @var Models\{{ class.name }}Model $destroyableModel */
        $destroyableModel = $table->getNewMockModelInstance();
        $destroyableModel->save();
        $this->assertGreaterThan(0, $destroyableModel->destroyThoroughly());
    }

{% if related_objects > 0 %}
{% for related_object in related_objects %}

{% if remote_object.getLocalFunctionName|singularize|transform_camel_to_studly not in existingMethods %}
{% set existingMethods = existingMethods|merge([ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly ]) %}
    /**
     * @depends testNewMockModelInstance
     */
    public function test_RelatedObjects_Fetch{{ related_object.getRemoteFunctionName|transform_camel_to_studly }}Object({{ class.name }}Model ${{ class.name|singularize|transform_studly_to_camel }})
    {
        // Verify the function exists
        $this->assertTrue(method_exists(${{ class.name|singularize|transform_studly_to_camel }}, "fetch{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}Object"));

        // Call the function on it
        ${{ class.name|singularize|transform_studly_to_camel }}Model = ${{ class.name|singularize|transform_studly_to_camel }}->fetch{{ related_object.getRemoteFunctionName|transform_camel_to_studly }}Object();

        $this->assertInstanceOf(Models\{{ related_object.getRemoteClass }}Model::class, ${{ class.name|singularize|transform_studly_to_camel }}Model);
    }

{% endif %}
{% endfor %}
{% endif %}

{% if remote_objects %}
{% for remote_object in remote_objects %}
{% if remote_object.getLocalFunctionName|singularize not in existingMethods %}
{% set existingMethods = existingMethods|merge([ remote_object.getLocalFunctionName|singularize ]) %}
    /**
     * @depends testNewMockModelInstance
     */
    public function test_RemoteObjects_Fetch{{ remote_object.getLocalFunctionName|singularize }}Objects({{ class.name }}Model ${{ class.name|singularize|transform_studly_to_camel }})
    {
        // Verify the function exists
        $this->assertTrue(method_exists(${{ class.name|singularize|transform_studly_to_camel }}, "fetch{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects"));

        /** @var TableGateways\{{ remote_object.getLocalTableGatewayName }} $tableGateway */
        $tableGateway = $this->getDIContainer()->get(TableGateways\{{ remote_object.getLocalTableGatewayName }}::class);

        ${{ class.name|singularize|transform_studly_to_camel }}->save();

        $this->assertNotNull(${{ class.name|singularize|transform_studly_to_camel }}->{{ remote_object.getRemoteBoundColumnGetter }}());

        /** @var Models\{{ remote_object.getLocalModelName }} $new{{ remote_object.getLocalModelName }} */
        $new{{ remote_object.getLocalModelName }} = $tableGateway->getNewMockModelInstance();
        $new{{ remote_object.getLocalModelName }}->{{ remote_object.getLocalBoundColumnSetter }}(${{ class.name|singularize|transform_studly_to_camel }}->{{ remote_object.getRemoteBoundColumnGetter }}());

        // Alas, some non-generic business logic has snuck in here.
        // If this model has a field called UUID, make it an actual UUID
        if(method_exists($new{{ remote_object.getLocalModelName }}, 'setUuid')) {
            $new{{ remote_object.getLocalModelName }}->setUuid(UUID::v4());
        }

        // If this model has a 'deleted' column, set it to no.
        if(method_exists($new{{ remote_object.getLocalModelName }}, 'setDeleted')) {
            $new{{ remote_object.getLocalModelName }}->setDeleted(Models\{{ remote_object.getLocalModelName }}::DELETED_NO);
        }

        // Save our new model. Make offerings to the gods of phpunit & transaction rollback to clean it up afterwards.
        $new{{ remote_object.getLocalModelName }}->save();
        $this->assertNotNull($new{{ remote_object.getLocalModelName }}->{{ remote_object.getLocalBoundColumnGetter }}());

        // Call the singular function on it
        ${{ remote_object.getLocalFunctionName|transform_studly_to_camel }}Model = ${{ class.name|singularize|transform_studly_to_camel }}->fetch{{ remote_object.getLocalFunctionName|singularize }}Object();

        $this->assertInstanceOf(Models\{{ remote_object.getLocalModelName }}::class, ${{ remote_object.getLocalFunctionName|transform_studly_to_camel }}Model);

        // Call the plural function on it
        ${{ remote_object.getLocalFunctionName|singularize|transform_studly_to_camel }}Models = ${{ class.name|singularize|transform_studly_to_camel }}->fetch{{ remote_object.getLocalFunctionName|singularize }}Objects();

        $this->assertGreaterThanOrEqual(1, count(${{ remote_object.getLocalFunctionName|singularize|transform_studly_to_camel }}Models), "fetch{{ remote_object.getLocalFunctionName|singularize }}Objects() failed to return atleast 1 Models\{{ remote_object.getLocalModelName }}.");
        $this->assertContainsOnlyInstancesOf(Models\{{ remote_object.getLocalModelName }}::class, ${{ remote_object.getLocalFunctionName|singularize|transform_studly_to_camel }}Models);

        return [${{ class.name|singularize|transform_studly_to_camel }}, ${{ remote_object.getLocalFunctionName|singularize|transform_studly_to_camel }}Models];
    }

    /**
     * @depends test_RemoteObjects_Fetch{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects
     */
    public function test_RemoteObjects_Count{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects($list)
    {
        /**
         * @var ${{ class.name|singularize|transform_studly_to_camel }} Models\{{ class.name|transform_camel_to_studly }}Model
         * @var ${{ remote_object.getLocalFunctionName|singularize|transform_studly_to_camel }}Models Models\{{ remote_object.getLocalModelName }}[]
         */
        list(${{ class.name|singularize|transform_studly_to_camel }}, ${{ remote_object.getLocalFunctionName|singularize|transform_studly_to_camel }}Models) = $list;

        // Verify the function exists
        $this->assertTrue(method_exists(${{ class.name|singularize|transform_studly_to_camel }}, "count{{ remote_object.getLocalFunctionName|singularize }}Objects"));

        // Call the function on it
        $count = ${{ class.name|singularize|transform_studly_to_camel }}->count{{ remote_object.getLocalFunctionName|singularize }}Objects();

        $this->assertCount($count, ${{ remote_object.getLocalFunctionName|singularize|transform_studly_to_camel }}Models);
    }

{% endif %}
{% endfor %}
{% endif %}
    public function testGetPropertyMeta()
    {
        $propertyMeta = $this->testInstance->getPropertyMeta();
        $this->assertTrue(is_array($propertyMeta));
        $this->assertGreaterThan(0, count($propertyMeta));
{% for column in columns %}
        $this->assertArrayHasKey('{{ column.getField }}', $propertyMeta);
{% endfor %}
    }

}
