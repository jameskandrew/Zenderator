<?php
$exampleExistingObjectFindFunction = function()
{
    $DIContainer = \{{ app_container }}::Instance()->getContainer();
    $tableGateway = $DIContainer->get(\{{ namespace }}\TableGateways\{{ class_name }}TableGateway::class);

    /** @var \{{ namespace }}\TableGateways\{{ class_name }}TableGateway $exampleExistingObjectTableGateway */
    $exampleExistingObjectTableGateway = $DIContainer->get(\{{ namespace }}\TableGateways\{{ class_name }}TableGateway::class);

    /** @var \{{ namespace }}\Models\{{ class_name }}Model $exampleExistingObject */
    $exampleExistingObject = $exampleExistingObjectTableGateway->getNewMockModelInstance();
    if(method_exists($exampleExistingObject, 'setId')){
        $exampleExistingObject->setId(rand(1000000,9999999));
    }

    return $exampleExistingObject;
};
{#
$propertyData = [
{%  include "Router/_route_setPropertyData.php.twig" %}
];
#}
// Router proper begins
$router = \Gone\AppCore\Router\Router::Instance()
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class_name }} List')
            ->setCallback(\{{ namespace }}\Controllers\{{ class_name }}Controller::class . ':listRequest')
            ->setSDKClass('{{ class_name }}')
            ->setSDKFunction('list')
            ->setSDKTemplate('list')
            ->setRouterPattern('/v1/{{ controller_route }}')
            ->setHttpEndpoint('/v1/{{ controller_route }}')
            ->setHttpMethod('GET')
            ->setSingular('{{ object_name_singular }}')
            ->setPlural('{{ object_name_plural }}')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
            ->setPropertyData($propertyData)
            ->setExampleEntityFindFunction($exampleExistingObjectFindFunction)
            ->setCallbackProperties([
                "Filter" => [
                    "name" => "Filter",
                    "default" => null,
                    "description" => "Filter object with rules to filter the list results by",
                    "in" => "header",
                    "isMandatory" => false,
                    "type" => \Gone\SDK\Common\Filters\Filter::class,
                ],
            ])
    )
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class_name }} Create')
            ->setCallback(\{{ namespace }}\Controllers\{{ class_name }}Controller::class . ':createRequest')
            ->setSDKClass('{{ class_name }}')
            ->setSDKFunction('create')
            ->setSDKTemplate('create')
            ->setRouterPattern('/v1/{{ controller_route }}')
            ->setHttpEndpoint('/v1/{{ controller_route }}')
            ->setHttpMethod('PUT')
            ->setSingular('{{ object_name_singular }}')
            ->setPlural('{{ object_name_plural }}')
            ->setPropertyData($propertyData)
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
            ->setExampleEntityFindFunction($exampleExistingObjectFindFunction)
    )
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class_name }} Get')
            ->setCallback(\{{ namespace }}\Controllers\{{ class_name }}Controller::class . ':getRequest')
            ->setSDKClass('{{ class_name }}')
            ->setSDKFunction('get')
            ->setSDKTemplate('get')
            ->setRouterPattern('/v1/{{ controller_route }}/{id}')
            ->setHttpEndpoint('/v1/{{ controller_route }}/id')
            ->setHttpMethod('GET')
            ->setSingular('{{ object_name_singular }}')
            ->setPlural('{{ object_name_plural }}')
            ->setPropertyData($propertyData)
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
            ->setExampleEntityFindFunction($exampleExistingObjectFindFunction)
            ->setCallbackProperties([
                "id" => [
                    "name" => "id",
                    "default" => null,
                    "description" => "ID of the object to be returned",
                    "in" => "path",
                    "isMandatory" => true,
                    "type" => "integer",
                ],
            ])
    )
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class_name }} Delete')
            ->setCallback(\{{ namespace }}\Controllers\{{ class_name }}Controller::class . ':deleteRequest')
            ->setSDKClass('{{ class_name }}')
            ->setSDKFunction('delete')
            ->setSDKTemplate('delete')
            ->setRouterPattern('/v1/{{ controller_route }}/{id}')
            ->setHttpEndpoint('/v1/{{ controller_route }}/id')
            ->setHttpMethod('DELETE')
            ->setSingular('{{ object_name_singular }}')
            ->setPlural('{{ object_name_plural }}')
            ->setPropertyData($propertyData)
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
            ->setCallbackProperties([
                "id" => [
                    "name" => "id",
                    "default" => null,
                    "description" => "ID of the object to be deleted",
                    "in" => "path",
                    "isMandatory" => true,
                    "type" => "integer",
                ],
            ])
    )
{% for related in related_objects %}
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class_name }} Delete')
            ->setCallback(\{{ namespace }}\Controllers\{{ class_name }}Controller::class . ':{{ related.getBoundModelReferenceNameLC }}Request')
            ->setSDKClass('{{ class_name }}')
            ->setSDKFunction('get{{ related.getBoundModelReferenceName }}')
            ->setRouterPattern('/v1/{{ controller_route }}/{id}/{{ related.getBoundModelReferenceNameSC }}')
            ->setHttpEndpoint('/v1/{{ controller_route }}/id/{{ related.getBoundModelReferenceNameSC }}')
            ->setHttpMethod('GET')
            ->setSingular('{{ object_name_singular }}')
            ->setPlural('{{ object_name_plural }}')
            ->setPropertyData({{ class_name }}Model::getPropertyMeta())
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
            ->setCallbackProperties([
                "id" => [
                    "name" => "id",
                    "default" => null,
                    "description" => "ID of the object to be deleted",
                    "in" => "path",
                    "isMandatory" => true,
                    "type" => "integer",
                ],
            ])
    )
{% endfor %}
;


