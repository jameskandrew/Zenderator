<?php
namespace {{ class.namespace }}\Validators\Base;

use Gone\SDK\Common\Validator\AbstractValidator;
use Gone\SDK\Common\Validator\ValidatorRule;
use Gone\SDK\Common\Validator\ValidatorRuleCollection;
use Respect\Validation\Validator;

abstract class Base{{ class.name }}Validator extends AbstractValidator
{
    public function getRules() : ValidatorRuleCollection
    {
        return ValidatorRuleCollection::Factory()
{% if class.conditions %}
{% for condition in class.conditions %}
            ->addRule(
{#//              {{ condition|json_encode()|raw }}#}
                ValidatorRule::Factory()
                    ->setFields({{ condition.fields|json_encode()|raw }})
                    ->setRule({{ condition.required ? '' : 'Validator::optional(' }}{% if condition.type == "string" %}Validator::stringType()->length({{ condition.required ? '1' : '0' }}, {{ condition.length is defined ? condition.length : 'null' }}){% elseif condition.type == "int" or condition.type == "float" %}Validator::{{ condition.type }}Type(){% if condition.min is defined %}->min({{ condition.min }}){% endif %}{% if condition.max is defined %}->min({{ condition.max }}){% endif %}{% elseif condition.type == "enum" %}Validator::in({{ condition.options|json_encode()|raw }}){% endif %}{{ condition.required ? "" : ")" }}),
                "{{ condition.key }}"
            )
{% endfor %}
{% endif %};
    }
}