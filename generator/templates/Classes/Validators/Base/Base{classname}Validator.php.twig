<?php
namespace {{ class.namespace }}\Validators\Base;

use Gone\AppCore\Validator\AbstractValidator;
use Gone\AppCore\Validator\ValidatorRule;
use Gone\AppCore\Validator\UniqueFieldRule;
use Gone\AppCore\Validator\ValidatorRuleCollection;
use Gone\AppCore\Validator\Rules\ForeignKeyRule;
use {{ class.namespace }}\AccessLayers;
use {{ class.namespace }}\Models;
use Respect\Validation\Validator;
use Exception;

abstract class Base{{ class.name }}Validator extends AbstractValidator
{
    /** @var AccessLayers\{{ class.name }}AccessLayer;
    private ${{ class.variable }}AccessLayer;
{% for var, className in class.relatedClasses %}
{% if not className == class.name  %}
    /** @var AccessLayers\{{ className }}AccessLayer */
    private ${{ var }}AccessLayer;
{% endif %}
{% endfor %}

    public function __construct(
        AccessLayers\{{ class.name }}AccessLayer ${{ class.variable }}AccessLayer
{% for var, className in class.relatedClasses %}
{% if not className == class.name  %}
        ,AccessLayers\{{ className }}AccessLayer ${{ var }}AccessLayer
{% endif %}
{% endfor %}
    ){
        $this->{{ class.variable }}AccessLayer = ${{ class.variable }}AccessLayer;
{% for var, className in class.relatedClasses %}
{% if not className == class.name  %}
        $this->{{ var }}AccessLayer = ${{ var }}AccessLayer;
{% endif %}
{% endfor %}
    }

    /**
     * @return ValidatorRuleCollection
     * @throws Exception
     */
    public function getRules() : ValidatorRuleCollection
    {
        return ValidatorRuleCollection::Factory()
{% if class.conditions %}
{% for condition in class.conditions %}
            ->addRule(
{#//              {{ condition|json_encode()|raw }}#}
                ValidatorRule::Factory()
                    ->setFields({{ condition.fields|json_encode()|raw }})
{% if condition.type == "foreignKey" %}
                    ->setRule(new ForeignKeyRule($this->{{ condition.variable }}AccessLayer,Models\{{ condition.class }}Model::FIELD_{{ condition.foreign|upper }}))
                    ->setScenarios([AbstractValidator::SCENARIO_DEFAULT,"{{ condition.key }}"])
{% elseif condition.type == "unique" %}
                    ->setRule(new UniqueFieldRule($this->{{ class.variable }}AccessLayer,Models\{{ class.name }}Model::PRIMARY_KEYS))
{% else %}
                    ->setRule({{ condition.required ? '' : 'Validator::optional(' }}{% if condition.type == "string" %}Validator::stringType()->length({{ condition.required ? '1' : '0' }}, {{ condition.length is defined ? condition.length : 'null' }}){% elseif condition.type == "int" or condition.type == "float" %}Validator::{{ condition.type }}Type(){% if condition.min is defined %}->min({{ condition.min }}){% endif %}{% if condition.max is defined %}->min({{ condition.max }}){% endif %}{% elseif condition.type == "enum" %}Validator::in({{ condition.options|json_encode()|raw }}){% endif %}{{ condition.required ? "" : ")" }})
{% if not condition.required %}
                    ->setScenarios([AbstractValidator::SCENARIO_ALL])
{% else %}
                    ->setScenarios([AbstractValidator::SCENARIO_DEFAULT,"{{ condition.key }}"])
{% endif %}
{% endif %},
                "{{ condition.key }}"
            )
{% endfor %}
{% endif %};
    }
}