<?php

namespace {{ class.namespace }}\Services\Base;

use Gone\SDK\Common\Filters\Filter;
use Gone\AppCore\Validator\AbstractValidator;
use Gone\AppCore\Abstracts\Service as AbstractService;
use Gone\AppCore\Interfaces\ServiceInterface as ServiceInterface;
use Gone\SDK\Common\Abstracts\AbstractModel;
use \{{ class.namespace }}\AccessLayers;
use \{{ class.namespace }}\Models;
{% if "Validators" in config.templates %}
{% set validators = true %}
use \{{ class.namespace }}\Validators;
{% endif %}
{% if "Cleaners" in config.templates %}
{% set cleaners = true %}
use \{{ class.namespace }}\Cleaners;
{% endif %}
use Zend\Db\ResultSet\ResultSet;
use Zend\Db\Sql\Select;
use Zend\Db\Sql\Predicate\Operator;
use Zend\Db\Sql\Predicate\PredicateSet;
use Exception;

{% set SKIP_ARGS = config.routes.skip_argument %}

{% set HAS_SKIP_ARG = false %}
{% for arg in SKIP_ARGS %}
{% if arg in class.properties|keys %}
{% set HAS_SKIP_ARG = true %}
{% endif %}
{% endfor %}

{% include '_overwrite_warning.twig' %}

// @todo: Make all Services implement a ServicesInterface
abstract class Base{{ class.name }}Service
    extends AbstractService
//    implements ServiceInterface
{

    protected $modelClass = Models\{{ class.name }}Model::class;

{% if class.foreignClasses %}
    // Remote & Related Objects Table Access Layers
{% for variable,foreign in class.foreignClasses %}
{% if foreign != class.name %}
    /** @var AccessLayers\{{ foreign }}AccessLayer */
    protected ${{ variable }}AccessLayer;
{% endif %}
{% endfor %}

{% endif %}

    public function __construct(
{% for variable,foreign in class.foreignClasses %}
{% if foreign != class.name %}
        AccessLayers\{{ foreign }}AccessLayer ${{ variable }}AccessLayer,
{% endif %}
{% endfor %}
        AccessLayers\{{ class.name }}AccessLayer ${{ class.variable }}AccessLayer
{% if validators %}
        ,Validators\{{ class.name }}Validator ${{ class.variable }}Validator
{% endif %}
{% if cleaners %}
        ,Cleaners\{{ class.name }}Cleaner ${{ class.variable }}Cleaner
{% endif %}
    )
    {
{% for variable,foreign in class.foreignClasses %}
{% if foreign != class.name %}
        $this->{{ variable }}AccessLayer = ${{ variable }}AccessLayer;
{% endif %}
{% endfor %}
{% if not validators %}
        ${{ class.variable }}Validator = null;
{% endif %}
{% if not cleaners %}
        ${{ class.variable }}Cleaner = null;
{% endif %}
        parent::__construct(${{ class.variable }}AccessLayer,${{ class.variable }}Validator,${{ class.variable }}Cleaner);
    }

    public function getByPK($pk){
{% for arg in SKIP_ARGS %}
{% if arg in class.properties|keys %}
        $_pk[Models\{{ class.name }}Model::FIELD_{{ arg|upper }}] = $this->get{{ class.properties[arg].name }}();
{% endif %}
{% endfor %}
        $_pk = [];
        foreach($pk as $property => $value){
            if(in_array($property,Models\{{ class.name }}Model::PRIMARY_KEYS)){
                $_pk[$property] = $value;
            }
        }
        return parent::getByPK($_pk);
    }

{% if HAS_SKIP_ARG %}
    protected function prepModelForSave(AbstractModel ${{ class.variable }})
    {
        /** @var Models\{{ class.name }}Model ${{ class.variable }} */
{% for arg in SKIP_ARGS %}
{% if arg in class.properties|keys %}
        ${{ class.variable }}->set{{ class.properties[arg].name }}($this->get{{ class.properties[arg].name }}());
{% endif %}
{% endfor %}
        return ${{ class.variable }};
    }

    protected function getBasePredicate(string $alias = null): ?PredicateSet
    {
        if(empty($alias)){
            $alias = Models\{{ class.name }}Model::TABLE_NAME;
        }
        $predicates = [];
{% for arg in SKIP_ARGS %}
{% if arg in class.properties|keys %}
        $predicates[] = new Operator("{$alias}." . Models\{{ class.name }}Model::FIELD_{{ arg|upper }},Operator::OP_EQ, $this->get{{ class.properties[arg].name }}());
{% endif %}
{% endfor %}
        return new PredicateSet($predicates);
    }

{% for arg in SKIP_ARGS %}
{% if arg in class.properties|keys %}
    abstract protected function get{{ class.properties[arg].name }}();

{% endif %}
{% endfor %}

{% endif %}
{% for related in class.relatedData %}
{% if loop.first %}
    //Related Data
{% endif %}
{% for field in related.fields %}
    /**
     * @param $pks
     *
     * @return mixed|null
     * @throws Exception
     */
    public function get{{ field.related.variableUC }}($pks)
    {
        $select = $this->{{ related.class.nameLC }}AccessLayer->getSelect()
            ->join(
                Models\{{ class.name }}Model::TABLE_NAME,
                new Operator(
                    Models\{{ class.name }}Model::TABLE_NAME . "." . Models\{{ class.name }}Model::FIELD_{{ field.local.name|upper }},
                    Operator::OP_EQ,
                    Models\{{ related.class.name }}Model::TABLE_NAME . "." . Models\{{ related.class.name }}Model::FIELD_{{ field.related.name|upper }},
                    Operator::TYPE_IDENTIFIER,
                    Operator::TYPE_IDENTIFIER
                )
            )
            ->where(
                $this->getBasePredicate()
                    ->addPredicates([
{% for key in class.primaryKeys %}
{% if key in SKIP_ARGS %}
{% else %}
                        new Operator(
                            Models\{{ class.name }}Model::TABLE_NAME . "." . Models\{{ class.name }}Model::FIELD_{{ key|upper }},
                            Operator::OP_EQ,
                            $pks[Models\{{ class.name }}Model::FIELD_{{ key|upper }}]
                        ),
{% endif %}
{% endfor %}
                    ])
            );
        return $this->{{ related.class.nameLC }}AccessLayer->get($select);
    }

{% endfor %}
{% endfor %}


{% for remote in class.remoteData %}
{% if loop.first %}
    //Remote Data

{% endif %}
{% for field in remote.fields %}
    /**
     * @param       $pks
     *
     * @return array
     * @throws Exception
     */
    public function get{{ field.remote.variablePluralUC }}($pks)
    {
        $predicates = [
{% for key in class.primaryKeys %}
{% if key in SKIP_ARGS %}
{% else %}
            new Operator(
                Models\{{ class.name }}Model::TABLE_NAME . "." . Models\{{ class.name }}Model::FIELD_{{ key|upper }},
                Operator::OP_EQ,
                $pks[Models\{{ class.name }}Model::FIELD_{{ key|upper }}]
            ),
{% endif %}
{% endfor %}
        ];

{% for key in remoteClass.primaryKeys %}
{% if key in SKIP_ARGS %}
{% else %}
        if(!empty($pks[Models\{{ remote.class.name }}Model::FIELD_{{ key|upper }}])){
            $predicates[] = new Operator(
                Models\{{ remote.class.name }}Model::TABLE_NAME . "." . Models\{{ remote.class.name }}Model::FIELD_{{ key|upper }},
                Operator::OP_EQ,
                $pks[Models\{{ remote.class.name }}Model::FIELD_{{ key|upper }}]
            );
        }
{% endif %}
{% endfor %}

        $select = $this->addressAccessLayer->getSelect()
            ->join(
                Models\{{ class.name }}Model::TABLE_NAME,
                new Operator(
                    Models\{{ class.name }}Model::TABLE_NAME . "." . Models\{{ class.name }}Model::FIELD_{{ field.local.name|upper }},
                    Operator::OP_EQ,
                    Models\{{ remote.class.name }}Model::TABLE_NAME . "." . Models\{{ remote.class.name }}Model::FIELD_{{ field.remote.name|upper }},
                    Operator::TYPE_IDENTIFIER,
                    Operator::TYPE_IDENTIFIER
                )
            )
            ->where(
                $this->getBasePredicate()
                    ->addPredicates($predicates)
            );

        return $this->addressAccessLayer->getAll($select);
    }

{% endfor %}
{% endfor %}
}