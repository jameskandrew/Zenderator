<?php

$baseSKDData = \Gone\AppCore\Router\RouteSDKProperties::Factory()
                    ->setResponseClass(\{{ class.namespace }}\Models\{{ class.name }}Model::class)
                    ->setClass(\{{ class.namespace }}\Models\{{ class.name }}Model::NAME_SINGULAR);

// Router proper begins
$router = \Gone\AppCore\Router\Router::Instance()
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Get All')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':getAllRequest')
            ->setSdkProperties(
                $baseSKDData
                    ->setFunction('getAll')
                    ->setReturnsArray(true)
                    ->setArguments([
                        "filter" => [
                            "default" => null,
                            "description" => "Filter object with rules to filter the list results by",
                            "in" => "header",
                            "required" => false,
                            "type" => \Gone\SDK\Common\Filters\Filter::class,
                        ],
                        "fields" => [
                            "default" => null,
                            "description" => "Array of fields you want returned",
                            "in" => "header",
                            "required" => false,
                            "type" => "array",
                            "cancelHydrate" => true,
                        ],
                    ])
            )
            ->setRouterPattern('/v1/{{ class.plural|lower }}')
            ->setHttpEndpoint('/v1/{{ class.plural|lower }}')
            ->setHttpMethod('GET')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
    ){#
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Get All Fields')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':getFieldsRequest')
            ->setSdkProperties(
                $baseSKDData
                    ->setFunction('getAllFields')
                    ->setReturnsArray(true)
                    ->setArguments([
                        "fields" => [
                            "default" => null,
                            "description" => "Array of fields to return",
                            "in" => "header",
                            "required" => true,
                            "type" => "array",
                        ],
                        "filter" => [
                            "default" => null,
                            "description" => "Filter object with rules to filter the results by",
                            "in" => "header",
                            "required" => false,
                            "type" => \Gone\SDK\Common\Filters\Filter::class,
                        ],
                        "types" => [
                            "default" => null,
                            "description" => "A key value array of the field and their appropriate php type",
                            "in" => "header",
                            "required" => false,
                            "type" => "array",
                        ],
                    ])
            )
            ->setRouterPattern('/v1/{{ class.plural|lower }}/fields')
            ->setHttpEndpoint('/v1/{{ class.plural|lower }}/fields')
            ->setHttpMethod('GET')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
    )#}
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Create')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':createRequest')
            ->setSdkProperties(
                $baseSKDData
                    ->setFunction('create')
                    ->setReturnsArray(false)
                    ->setArguments([
                        "body" => [
                            "default" => null,
                            "description" => "Array of data to use tor create the model",
                            "in" => "body",
                            "required" => true,
                            "type" => \{{ class.namespace }}\Models\{{ class.name }}Model::NAME_SINGULAR . "[]",
                        ],
                    ])
            )
            ->setRouterPattern('/v1/{{ class.plural|lower }}')
            ->setHttpEndpoint('/v1/{{ class.plural|lower }}')
            ->setHttpMethod('PUT')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
    )
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Create Bulk')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':createBulkRequest')
            ->setSdkProperties(
                $baseSKDData
                    ->setFunction('createBulk')
                    ->setReturnsArray(true)
                    ->setArguments([
                        "body" => [
                            "default" => null,
                            "description" => "Array of data to use tor create the model",
                            "in" => "body",
                            "required" => true,
                            "type" => \{{ class.namespace }}\Models\{{ class.name }}Model::NAME_SINGULAR . "[][]",
                        ],
                    ])
            )
            ->setRouterPattern('/v1/{{ class.plural|lower }}/bulk')
            ->setHttpEndpoint('/v1/{{ class.plural|lower }}/bulk')
            ->setHttpMethod('PUT')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
    )
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Update')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':updateRequest')
            ->setSdkProperties(
                $baseSKDData
                    ->setFunction('update')
                    ->setReturnsArray(false)
                    ->setArguments([
{% for key in class.routePKs %}
                        "{{ key }}" => [
                            "default" => null,
                            "description" => "Primary key for model",
                            "in" => "query",
                            "required" => true,
                            "type" => "{{ class.properties[key].phpType }}",
                        ],
{% endfor %}
                        "body" => [
                            "default" => null,
                            "description" => "Array of data to use to create the model",
                            "in" => "body",
                            "required" => true,
                            "type" => \{{ class.namespace }}\Models\{{ class.name }}Model::NAME_SINGULAR . "[]",
                        ],
                    ])
            )
            ->setRouterPattern('/v1/{{ class.plural|lower }}/{% for key in class.routePKs %}{{ '{' }}{{ key }}{{ '}' }}{{ loop.last ? '' : '/' }}{% endfor %}')
            ->setHttpEndpoint('/v1/{{ class.plural|lower }}/{% for key in class.routePKs %}{{ key }}{{ loop.last ? '' : '/' }}{% endfor %}')
            ->setHttpMethod('PATCH')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
    )
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Get')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':getRequest')
            ->setSdkProperties(
                $baseSKDData
                    ->setFunction('get')
                    ->setReturnsArray(false)
                    ->setArguments([
{% for key in class.routePKs %}
                        "{{ key }}" => [
                            "default" => null,
                            "description" => "Primary key for model",
                            "in" => "query",
                            "required" => true,
                            "type" => "{{ class.properties[key].phpType }}",
                        ],
{% endfor %}
                    ])
            )
            ->setRouterPattern('/v1/{{ class.plural|lower }}/{% for key in class.routePKs %}{{ '{' }}{{ key }}{{ '}' }}{{ loop.last ? '' : '/' }}{% endfor %}')
            ->setHttpEndpoint('/v1/{{ class.plural|lower }}/{% for key in class.routePKs %}{{ key }}{{ loop.last ? '' : '/' }}{% endfor %}')
            ->setHttpMethod('GET')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
    )
{#    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Delete')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':deleteRequest')
            ->setSDKClass('{{ class.name }}')
            ->setSDKFunction('delete')
            ->setSDKTemplate('delete')
            ->setRouterPattern('/v1/{{ controller_route }}/{id}')
            ->setHttpEndpoint('/v1/{{ controller_route }}/id')
            ->setHttpMethod('DELETE')
            ->setSingular(\{{ class.namespace }}\Models\{{ class.name }}Model::NAME_SINGULAR)
            ->setPlural(\{{ class.namespace }}\Models\{{ class.name }}Model::NAME_PLURAL)
            ->setPropertyData(\{{ class.namespace }}\Models\{{ class.name }}Model::getPropertyMeta())
            ->setSDKTableName(\{{ class.namespace }}\Models\{{ class.name }}Model::TABLE_NAME)
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
            ->setCallbackProperties([
                "id" => [
                    "name" => "id",
                    "default" => null,
                    "description" => "ID of the object to be deleted",
                    "in" => "path",
                    "required" => true,
                    "type" => "integer",
                ],
            ])
    )
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Update PK')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':updatePKRequest')
            ->setSdkProperties(
                $baseSKDData
                    ->setFunction('updatePK')
                    ->setReturnsArray(false)
                    ->setArguments([
                        "newPK" => [
                            "default" => null,
                            "description" => "Old Primary key for model",
                            "in" => "query",
                            "required" => true,
                            "type" => "int",
                        ],
                        "oldPK" => [
                            "default" => null,
                            "description" => "New Primary key for model",
                            "in" => "query",
                            "required" => true,
                            "type" => "int",
                        ],
                    ])
            )
            ->setRouterPattern('/v1/{{ class.plural|lower }}/{{ '{' }}oldPK{{ '}' }}/updatePK/{{ '{' }}newPK{{ '}' }}')
            ->setHttpEndpoint('/v1/{{ class.plural|lower }}/oldPK/updatePK/newPK')
            ->setHttpMethod('PATCH')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
    )
#}
{% for related in class.relatedData %}
{% if loop.first %}
    //Related Data
{% endif %}
{% for field in related.fields %}
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Get {{ field.related.variableUC }} Model')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':{{ field.related.variable }}Request')
            ->setSdkProperties(
                $baseSKDData
                    ->setFunction('get{{ field.related.variableUC }}')
                    ->setResponseClass(\{{ class.namespace }}\Models\{{ related.class.name }}Model::class)
                    ->setReturnsArray(false)
                    ->setArguments([
{% for key in class.routePKs %}
                        "{{ key }}" => [
                            "default" => null,
                            "description" => "Primary key for model",
                            "in" => "query",
                            "required" => true,
                            "type" => "{{ class.properties[key].phpType }}",
                        ],
{% endfor %}
                    ])
            )
            ->setRouterPattern('/v1/{{ class.plural|lower }}/{% for key in class.routePKs %}{{ '{' }}{{ key }}{{ '}' }}{{ loop.last ? '' : '/' }}{% endfor %}/{{ field.related.variable }}')
            ->setHttpEndpoint('/v1/{{ class.plural|lower }}/{% for key in class.routePKs %}{{ key }}{{ loop.last ? '' : '/' }}{% endfor %}/{{ field.related.variable }}')
            ->setHttpMethod('GET')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
    )
{% endfor %}
{% endfor %}
{% for remote in class.remoteData %}
{% if loop.first %}
    //Remote Data
{% endif %}
{% for field in remote.fields %}
    ->addRoute(
        \Gone\AppCore\Router\Route::Factory()
            ->setName('{{ class.name }} Get {{ field.remote.variableUC }} Model')
            ->setCallback(\{{ class.namespace }}\Controllers\{{ class.name }}Controller::class . ':{{ field.remote.variablePlural }}Request')
            ->setSdkProperties(
                $baseSKDData
                    ->setFunction('get{{ field.remote.variablePluralUC }}')
                    ->setReturnsArray(true)
                    ->setResponseClass(\{{ class.namespace }}\Models\{{ remote.class.name }}Model::class)
                    ->setArguments([
{% for key in class.routePKs %}
                        "{{ key }}" => [
                            "default" => null,
                            "description" => "Primary key for model",
                            "in" => "query",
                            "required" => true,
                            "type" => "{{ class.properties[key].phpType }}",
                        ],
{% endfor %}
                        "filter" => [
                            "default" => null,
                            "description" => "Filter object with rules to filter the list results by",
                            "in" => "header",
                            "required" => false,
                            "type" => \Gone\SDK\Common\Filters\Filter::class,
                        ],
                    ])
            )
            ->setRouterPattern('/v1/{{ class.plural|lower }}/{% for key in class.routePKs %}{{ '{' }}{{ key }}{{ '}' }}{{ loop.last ? '' : '/' }}{% endfor %}/{{ field.remote.variablePlural }}')
            ->setHttpEndpoint('/v1/{{ class.plural|lower }}/{% for key in class.routePKs %}{{ key }}{{ loop.last ? '' : '/' }}{% endfor %}/{{ field.remote.variablePlural }}')
            ->setHttpMethod('GET')
            ->setAccess(DEFAULT_ROUTE_ACCESS_MODE)
    )
{% endfor %}
{% endfor %}
;


