<?php
namespace {{ class.namespace }}\Models\Base;

use Gone\SDK\Common\Abstracts\AbstractModel;
use {{ class.namespace }}\Models;

/**
 * Class Base{{ class.name }}Model
 *
 * @package {{ class.namespace }}\Models\Base
 */
abstract class Base{{ class.name }}Model extends AbstractModel
{
    const NAME_SINGULAR = "{{ class.singular }}";
    const NAME_PLURAL = "{{ class.plural }}";
    const TABLE_NAME = "{{ class.table }}";

{% for propertyName, data in class.properties %}
    const FIELD_{{ propertyName|upper }} = '{{ propertyName }}';
{% endfor %}

    //Property DB Types
{% for propertyName, data in class.properties %}
    const DBTYPE_{{ propertyName|upper }} = '{{ data.type }}';
{% endfor %}

    //Property PHP Types
{% for propertyName, data in class.properties %}
    const TYPE_{{ propertyName|upper }} = '{{ data.phpType }}';
{% endfor %}

    const PRIMARY_KEYS = [
{% for key in class.primaryKeys %}
        self::FIELD_{{ key|upper }},
{% endfor %}
    ];

{% for propertyName, data in class.properties %}
{% if data.options is not empty %}
{% for permittedValue in data.options %}
    const {{ propertyName|upper }}_{{ permittedValue|upper|replace({'-':'_',' ':'_'}) }} = '{{ permittedValue }}';
{% endfor %}
{% endif %}
{% endfor %}


{% set firstRes = true %}
{% for propertyName, data in class.properties %}
{% if data.options is not empty %}
{% if firstRes %}
{% set firstRes = false %}
    // Constant arrays defined by ENUMs
{% endif %}
    const OPTIONS_{{ propertyName|upper }} = [
{% for permittedValue in data.options %}
        self::{{ propertyName|upper }}_{{ permittedValue|upper|replace({'-':'_',' ':'_'}) }},
{% endfor %}
    ];
{% endif %}
{% endfor %}


    // Properties
{% for propertyName, data in class.properties %}
    /** @var {{ data.phpType }} ${{ propertyName }} */
    protected ${{ propertyName }};
{% endfor %}

    public function __toArray() : array
    {
        return [
{% for propertyName, data in class.properties %}
            self::FIELD_{{ propertyName|upper }} => $this->get{{ propertyName }}(),
{% endfor %}
        ];
    }

    // Getters and Setters
{% for propertyName, data in class.properties %}
    /**
{% if data.type == "json"  %}
    * @param bool $decode
    *
{% endif %}
    * @return {{ data.type == "json" ? "array|string" : data.phpType }}|null
    */
    public function get{{ data.name }}({{ data.type == "json" ? "bool $decode = false" : "" }})
    {
{% if data.type == "json" %}
        if($decode){
            return json_decode($this->{{ propertyName }},true);
        } else {
            return $this->{{ propertyName }};
        }
{% else %}
        return $this->{{ propertyName }};
{% endif %}
    }

    public function set{{ data.name }}(${{ propertyName }}) : Models\{{ class.name }}Model
    {
{% if data.phpType == "int" %}
        ${{ propertyName }} = intval(${{ propertyName }});
{% elseif data.phpType == "float" %}
        ${{ propertyName }} = floatval(${{ propertyName }});
{% elseif data.type == "json" %}
        if(!is_string(${{ propertyName }})){
            ${{ propertyName }} = json_encode(${{ propertyName }});
        }
{% endif %}
        if ($this->{{ propertyName }} !== ${{ propertyName }}) {
            $this->addDirtyKey(self::FIELD_{{ propertyName|upper }});
            $this->{{ propertyName }} = ${{ propertyName }};
        }
        return $this;
    }

{% endfor %}
    public static function getPublicPrimaryKeyFields(): array
    {
        return self::getPrimaryKeyFields();
    }

    public static function getPrimaryKeyFields(): array
    {
        return self::PRIMARY_KEYS;
    }

    public static function getPublicPropertyMeta(): array
    {
        return self::getPropertyMeta();
    }

    public static function getPropertyMeta(): array
    {
        return [
{% for propertyName, data in class.properties %}
            self::FIELD_{{ propertyName|upper }} => [
                'type' => self::DBTYPE_{{ propertyName|upper }},
                'nullable' => {{ data.nullable|json_encode|raw }},
{% if data.length %}
                'length' => {{ data.length }},
{% endif %}
                'unique' => {{ data.unique|json_encode()|raw }},
{% if data.options is not empty %}
                'options' => self::OPTIONS_{{ propertyName|upper }},
{% endif %}
{% if data.related is not empty %}
                'related' => [
{% for related in data.related %}
                    [
                        'name' => "{{ related.class.name }}",
                        'variable' => "{{ related.class.variable }}",
{#//                        'model' => Models\{{ related.class.name }}Model::class,#}
                        'column' => Models\{{ related.class.name }}Model::FIELD_{{ related.field.related.name|upper }},
                    ],
{% endfor %}
                ],
{% endif %}
{% if data.remote is not empty %}
                'remote' => [
{% for remote in data.remote %}
                    [
                        'name' => "{{ remote.class.name }}",
                        'variable' => "{{ remote.class.variable }}",
{#//                        'model' => Models\{{ remote.class.name }}Model::class,#}
                        'column' => Models\{{ remote.class.name }}Model::FIELD_{{ remote.field.remote.name|upper }},
                    ],
{% endfor %}
                ],
{% endif %}
{% if data.structure %}
                'structure' => '{{ data.structure|json_encode|raw }}',
{% endif %}
            ],
{% endfor %}
        ];
    }
}
{#
/*
{{ class|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}
*/
#}