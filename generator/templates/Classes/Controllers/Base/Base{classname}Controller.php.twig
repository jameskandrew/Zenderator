<?php
namespace {{ class.namespace }}\Controllers\Base;

//use Gone\SDK\Common\Filters\Filter;
use Gone\AppCore\Abstracts\CrudController as AbstractCrudController;
use \{{ class.namespace }}\Services;
use \{{ class.namespace }}\Models;
use Slim\Http\Request;
use Slim\Http\Response;
use Exception

{% include '_overwrite_warning.twig' %}

abstract class Base{{ class.name }}Controller extends AbstractCrudController
{
    const RESPONSIBLE_MODEL = Models\{{ class.name }}Model::class;

    protected $singularTerm = Models\{{ class.name }}Model::NAME_SINGULAR;
    protected $pluralTerm = Models\{{ class.name }}Model::NAME_PLURAL;

    /**
     * BaseLocationController constructor.
     *
     * @param Services\{{ class.name }}Service ${{ class.variable }}Service
     *
     * @throws Exception
     */
    public function __construct(
        Services\{{ class.name }}Service ${{ class.variable }}Service
    )
    {
        parent::__construct();
        $this->service = ${{ class.variable }}Service;
    }

    /**
     * @returns Services\{{ class.name }}Service
     */
    public function getService() : Services\{{ class.name }}Service
    {
        return parent::getService();
    }

{% for related in class.relatedData %}
{% if loop.first %}
    //Related Data
{% endif %}
{% for field in related.fields %}
    /**
     * @param Request  $request
     * @param Response $response
     * @param          $args
     *
     * @return Response
     * @throws Exception
     */
    public function {{ field.related.variable }}Request(Request $request, Response $response, $args) : Response
    {
        $pks = [
{% for key in class.primaryKeys %}
            "{{ key }}" => $args['{{ key }}'] ?? null,
{% endfor %}
        ];

        ${{ field.related.variable }} = $this->getService()->get{{ field.related.variableUC }}($pks);

        if (${{ field.related.variable }}) {
            return $this->jsonSuccessResponse(
                [
                    'Action'                          => 'GET_{{ field.related.variable|upper }}',
                    Models\{{ related.class.name }}Model::NAME_SINGULAR => ${{ field.related.variable }},
                ],
                $request,
                $response
            );
        }
        return $this->jsonFailureResponse(
            sprintf(
                "No such related %s found for %s with id %s",
                strtolower(Models\{{ related.class.name }}Model::NAME_SINGULAR),
                strtolower(Models\{{ class.name }}Model::NAME_SINGULAR),
                $args['id']
            ),
            $request,
            $response
        );
    }

{% endfor %}
{% endfor %}

{% for remote in class.remoteData %}
{% if loop.first %}
    //Remote Data
{% endif %}
{% for field in remote.fields %}
    /**
     * @param Request  $request
     * @param Response $response
     * @param          $args
     *
     * @return Response
     * @throws Exception
     */
    public function {{ field.remote.variablePlural }}Request(Request $request, Response $response, $args) : Response
    {
        $pks = [
{% for key in class.primaryKeys %}
            "{{ key }}" => $args['{{ key }}'] ?? null,
{% endfor %}
        ];

        //$filter = $this->parseFilters($request);

        ${{ field.remote.variablePlural }} = $this->getService()->get{{ field.remote.variablePluralUC }}($pks/*,$filter*/);

        return $this->jsonSuccessResponse(
            [
                'Action'                          => 'GET_{{ field.remote.variablePlural|transform_studly_to_screamingsnake }}',
                Models\{{ remote.class.name }}Model::NAME_PLURAL => ${{ field.remote.variablePlural }},
            ],
            $request,
            $response
        );
    }

{% endfor %}
{% endfor %}
}
